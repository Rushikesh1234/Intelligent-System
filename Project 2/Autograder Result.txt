C:\Users\Admin\Desktop\TTU\Intelligent System\Project 2\CS3568_Project2_MultiAgents\CS3568_Project2_MultiAgents>py autograder.py
autograder.py:17: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Starting on 10-15 at 2:42:23

Question q1
===========

Pacman emerges victorious! Score: 1211
Pacman emerges victorious! Score: 1148
Pacman emerges victorious! Score: 1231
Pacman emerges victorious! Score: 1185
Pacman emerges victorious! Score: 1232
Pacman died! Score: -235
Pacman emerges victorious! Score: 1157
Pacman emerges victorious! Score: 1230
Pacman emerges victorious! Score: 954
Pacman emerges victorious! Score: 943
Average Score: 1005.6
Scores:        1211.0, 1148.0, 1231.0, 1185.0, 1232.0, -235.0, 1157.0, 1230.0, 954.0, 943.0
Win Rate:      9/10 (0.90)
Record:        Win, Win, Win, Win, Win, Loss, Win, Win, Win, Win
*** PASS: test_cases\q1\grade-agent.test (4 of 4 points)
*** EXTRA CREDIT: 2 points
***     1005.6 average score (4 of 4 points)
***         Grading scheme:
***          < 500:  0 points
***         >= 500:  2 points
***         >= 1000:  4 points
***     10 games not timed out (0 of 0 points)
***         Grading scheme:
***          < 10:  fail
***         >= 10:  0 points
***     9 wins (2 of 4 points)
***         Grading scheme:
***          < 1:  fail
***         >= 1:  0 points
***         >= 5:  2 points
***         >= 10:  4 points

### Question q1: 6/8 ###


Question q2
===========

*** FAIL: Exception raised: 'MultiagentTreeState' object has no attribute 'getPacmanPosition'
***
*** Traceback (most recent call last):
***   File "C:\Users\Admin\Desktop\TTU\Intelligent System\Project 2\CS3568_Project2_MultiAgents\CS3568_Project2_MultiAgents\grading.py", line 81, in grade
***     self)  # Call the question's function
***   File "C:\Users\Admin\Desktop\TTU\Intelligent System\Project 2\CS3568_Project2_MultiAgents\CS3568_Project2_MultiAgents\util.py", line 681, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 312, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "C:\Users\Admin\Desktop\TTU\Intelligent System\Project 2\CS3568_Project2_MultiAgents\CS3568_Project2_MultiAgents\testClasses.py", line 57, in execute
***     if not f(grades):
***   File "autograder.py", line 307, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "multiagentTestClasses.py", line 434, in execute
***     action, generated = self.solveProblem(multiAgents)
***   File "multiagentTestClasses.py", line 421, in solveProblem
***     action = studentAgent.getAction(self.problem.startState)
***   File "multiAgents.py", line 236, in getAction
***     val = self.calculate_Minmax(gameState.generateSuccessor(0, action), 0, 0)
***   File "multiAgents.py", line 176, in calculate_Minmax
***     return self.evaluate_Minmax(state)
***   File "multiAgents.py", line 245, in evaluate_Minmax
***     newPos = currentGameState.getPacmanPosition()
*** AttributeError: 'MultiagentTreeState' object has no attribute 'getPacmanPosition'
***

### Question q2: 0/10 ###


Question q3
===========

*** FAIL: Exception raised: 'MultiagentTreeState' object has no attribute 'getPacmanPosition'
***
*** Traceback (most recent call last):
***   File "C:\Users\Admin\Desktop\TTU\Intelligent System\Project 2\CS3568_Project2_MultiAgents\CS3568_Project2_MultiAgents\grading.py", line 81, in grade
***     self)  # Call the question's function
***   File "C:\Users\Admin\Desktop\TTU\Intelligent System\Project 2\CS3568_Project2_MultiAgents\CS3568_Project2_MultiAgents\util.py", line 681, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 312, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "C:\Users\Admin\Desktop\TTU\Intelligent System\Project 2\CS3568_Project2_MultiAgents\CS3568_Project2_MultiAgents\testClasses.py", line 57, in execute
***     if not f(grades):
***   File "autograder.py", line 307, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "multiagentTestClasses.py", line 434, in execute
***     action, generated = self.solveProblem(multiAgents)
***   File "multiagentTestClasses.py", line 421, in solveProblem
***     action = studentAgent.getAction(self.problem.startState)
***   File "multiAgents.py", line 378, in getAction
***     val = self.calculate_AlphaBeta(alpha, beta, gameState.generateSuccessor(0, action), 0, 0)
***   File "multiAgents.py", line 329, in calculate_AlphaBeta
***     return self.evaluate_AlphaBeta(state)
***   File "multiAgents.py", line 387, in evaluate_AlphaBeta
***     newPos = currentGameState.getPacmanPosition()
*** AttributeError: 'MultiagentTreeState' object has no attribute 'getPacmanPosition'
***

### Question q3: 0/10 ###


Question q4
===========

*** FAIL: Exception raised: 'MultiagentTreeState' object has no attribute 'getPacmanPosition'
***
*** Traceback (most recent call last):
***   File "C:\Users\Admin\Desktop\TTU\Intelligent System\Project 2\CS3568_Project2_MultiAgents\CS3568_Project2_MultiAgents\grading.py", line 81, in grade
***     self)  # Call the question's function
***   File "C:\Users\Admin\Desktop\TTU\Intelligent System\Project 2\CS3568_Project2_MultiAgents\CS3568_Project2_MultiAgents\util.py", line 681, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 312, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "C:\Users\Admin\Desktop\TTU\Intelligent System\Project 2\CS3568_Project2_MultiAgents\CS3568_Project2_MultiAgents\testClasses.py", line 57, in execute
***     if not f(grades):
***   File "autograder.py", line 307, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "multiagentTestClasses.py", line 434, in execute
***     action, generated = self.solveProblem(multiAgents)
***   File "multiagentTestClasses.py", line 421, in solveProblem
***     action = studentAgent.getAction(self.problem.startState)
***   File "multiAgents.py", line 520, in getAction
***     val = self.calculate_Expectimax(gameState.generateSuccessor(0, action), 0, 0)
***   File "multiAgents.py", line 478, in calculate_Expectimax
***     return self.evaluate_Expectimax(state)
***   File "multiAgents.py", line 529, in evaluate_Expectimax
***     newPos = currentGameState.getPacmanPosition()
*** AttributeError: 'MultiagentTreeState' object has no attribute 'getPacmanPosition'
***

### Question q4: 0/10 ###


Question q5
===========

Pacman died! Score: -409
Pacman emerges victorious! Score: 1286
Pacman died! Score: -383
Pacman died! Score: -909
Pacman died! Score: -397
Pacman died! Score: -491
Pacman died! Score: -427
Pacman died! Score: -354
Pacman died! Score: -411
Pacman emerges victorious! Score: 1339
Average Score: -115.6
Scores:        -409.0, 1286.0, -383.0, -909.0, -397.0, -491.0, -427.0, -354.0, -411.0, 1339.0
Win Rate:      2/10 (0.20)
Record:        Loss, Win, Loss, Loss, Loss, Loss, Loss, Loss, Loss, Win
*** FAIL: test_cases\q5\grade-agent.test (4 of 6 points)
***     -115.6 average score (0 of 4 points)
***         Grading scheme:
***          < 500:  0 points
***         >= 500:  2 points
***         >= 1000:  4 points
***     10 games not timed out (2 of 2 points)
***         Grading scheme:
***          < 0:  fail
***         >= 0:  0 points
***         >= 10:  2 points
***     2 wins (2 of 6 points)
***         Grading scheme:
***          < 1:  fail
***         >= 1:  2 points
***         >= 5:  4 points
***         >= 10:  6 points

### Question q5: 4/12 ###


Finished at 2:43:17

Provisional grades
==================
Question q1: 6/8
Question q2: 0/10
Question q3: 0/10
Question q4: 0/10
Question q5: 4/12
------------------
Total: 10/50

Your grades are NOT yet registered.  To register your grades, make sure
to follow your instructor's guidelines to receive credit on your project.